<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- bean 的生命周期分为 **构造 (填充属性) -> 初始化 -> 使用 -> 销毁** 四个阶段, 在 spring 中我们可以为
         bean 的 **构造, 初始化, 销毁** 这三个阶段配置回调函数, 以此来参与 spring 对 bean 生命周
         期的管理. 有以下三种实现方式:

         1. 让对象实现 InitializingBean | DisposableBean 接口, 实现其中的 afterPropertiesSet() | destroy()
            方法. 在 bean 依赖注入完成后, spring 会调用 afterPropertiesSet() 方法, 在容器销毁前, spring 会调用
            destroy() 方法. 但 spring 并不推荐我们通过实现接口的方式来实现回调函数, 因为这会让我们的代码和 spring 的
            代码强耦合在一起, 更推荐下面两种做法

         2. 使用 JakartaEE 标准中的 @PostConstruct | @PreDestroy 注解. 在初始化回调函数上加上 @PostConstruct 注解
            后, spring 会在 bean 构建出来以后调用初始化回调函数; 在销毁回调函数上加上 @PreDestroy 注解后, spring 会在
            bean 销毁之前调用销毁回调函数. 这里有两个需要注意的点:
            (1) Java9 之后 Java 把一些组件做了拆分, 使用时需要单独引如依赖. 这里用到的两个注解所在的包 javax.annotation
                就需要单独引入
            (2) 要让注解在 spring 中生效需要在 xml 文件中配置命名空间
                xmlns:context="http://www.springframework.org/schema/context"
                并在 xsi:schemaLocation 追加
                http://www.springframework.org/schema/context
                 https://www.springframework.org/schema/context/spring-context.xsd

         3. 在 <bean/> 中配置 init-method | destroy-method 属性.

         🌟 三种方法的调用先后顺序为: 2 > 1 > 3 -->

    <bean id="lifecycle-bean"
          class="com.seamew.xmlConfig.lifecycle.LifecycleBean"
          init-method="customizedInit"
          destroy-method="customizedDestroy"/>

</beans>